(function (e) { function i(e) { if (r) { console.log(e) } } function a(e) { var t = /^#?([a-f\d])([a-f\d])([a-f\d])$/i; e = e.replace(t, function (e, t, n, r) { return t + t + n + n + r + r }); var n = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e); return n ? { r: parseInt(n[1], 16), g: parseInt(n[2], 16), b: parseInt(n[3], 16) } : null } function f() { return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1) } function l() { return f() + f() + "-" + f() + "-" + f() + "-" + f() + "-" + f() + f() + f() } function c(e) { var t = e.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}\s[0-9]{1,2}:[0-9]{2}:[0-9]{2}$/); if (t !== null && t.length > 0) { var n = e.split(" "); var r = n[0].split("-"); var i = n[1].split(":"); return new Date(r[0], r[1] - 1, r[2], i[0], i[1], i[2]) } var s = Date.parse(e); if (!isNaN(s)) return s; s = Date.parse(e.replace(/-/g, "/").replace("T", " ")); if (!isNaN(s)) return s; return new Date } function h(e, t, n, r, i) { var s = {}; var o = {}; var a = {}; var f = {}; var l = {}; var c = {}; var h = null; for (var p in r) { var d = r[p]; var v; if (h === null) { v = n / u[d] } else { v = u[h] / u[d] } var m = e / u[d]; var g = t / u[d]; if (i) m = Math.floor(m); if (i) g = Math.floor(g); if (d !== "Days") { m = m % v; g = g % v } s[d] = m; a[d] = Math.abs(m); o[d] = g; c[d] = Math.abs(g); f[d] = Math.abs(m) / v; l[d] = Math.abs(g) / v; h = d } return { raw_time: s, raw_old_time: o, time: a, old_time: c, pct: f, old_pct: l } } var t = false; var n = 200; var r = location.hash === "#debug"; var s = ["Days", "Hours", "Minutes", "Seconds"]; var o = { Seconds: "Minutes", Minutes: "Hours", Hours: "Days", Days: "Years" }; var u = { Seconds: 1, Minutes: 60, Hours: 3600, Days: 86400, Months: 2678400, Years: 31536e3 }; var p = {}; if (window !== window.top && typeof window.top.TC_Instance_List !== "undefined") { p = window.top.TC_Instance_List } else { window.top.TC_Instance_List = p } (function () { var e = ["webkit", "moz"]; for (var t = 0; t < e.length && !window.top.requestAnimationFrame; ++t) { window.top.requestAnimationFrame = window.top[e[t] + "RequestAnimationFrame"] } if (!window.top.requestAnimationFrame) { window.top.requestAnimationFrame = function (e, t, n) { if (typeof n === "undefined") n = { data: { last_frame: 0 } }; var r = (new Date).getTime(); var i = Math.max(0, 16 - (r - n.data.last_frame)); var s = window.top.setTimeout(function () { e(r + i) }, i); n.data.last_frame = r + i; return s }; window.top.cancelAnimationFrame = function (e) { clearTimeout(e) } } })(); var d = function (e, t) { this.element = e; this.container; this.listeners = null; this.data = { paused: false, last_frame: 0, animation_frame: null, timer: false, total_duration: null, prev_time: null, drawn_units: [], text_elements: { Days: null, Hours: null, Minutes: null, Seconds: null }, attributes: { canvas: null, context: null, item_size: null, line_width: null, radius: null, outer_radius: null }, state: { fading: { Days: false, Hours: false, Minutes: false, Seconds: false } } }; this.config = null; this.setOptions(t); this.initialize() }; d.prototype.initialize = function (n) { this.data.drawn_units = []; for (var r in this.config.time) { if (this.config.time[r].show) { this.data.drawn_units.push(r) } } e(this.element).children("div.time_circles").remove(); if (typeof n === "undefined") n = true; if (n || this.listeners === null) { this.listeners = { all: [], visible: [] } } this.container = e("<div>"); this.container.addClass("time_circles"); this.container.appendTo(this.element); this.data.attributes.canvas = e("<canvas>"); try { this.data.attributes.context = this.data.attributes.canvas[0].getContext("2d") } catch (i) { t = true } var s = this.element.offsetHeight; var o = this.element.offsetWidth; if (s === 0) s = e(this.element).height(); if (o === 0) o = e(this.element).width(); if (s === 0 && o > 0) s = o / this.data.drawn_units.length; else if (o === 0 && s > 0) o = s * this.data.drawn_units.length; this.data.attributes.canvas[0].height = s; this.data.attributes.canvas[0].width = o; this.data.attributes.canvas.appendTo(this.container); this.data.attributes.item_size = Math.min(this.data.attributes.canvas[0].width / this.data.drawn_units.length, this.data.attributes.canvas[0].height); this.data.attributes.line_width = this.data.attributes.item_size * this.config.fg_width; this.data.attributes.radius = (this.data.attributes.item_size * .8 - this.data.attributes.line_width) / 2; this.data.attributes.outer_radius = this.data.attributes.radius + .5 * Math.max(this.data.attributes.line_width, this.data.attributes.line_width * this.config.bg_width); var u = 0; for (var a in this.data.text_elements) { if (!this.config.time[a].show) continue; var f = e("<div>"); f.addClass("textDiv_" + a); f.css("top", Math.round(.35 * this.data.attributes.item_size)); f.css("left", Math.round(u++ * this.data.attributes.item_size)); f.css("width", this.data.attributes.item_size); f.appendTo(this.container); var l = e("<h4>"); l.text(this.config.time[a].text); l.css("font-size", Math.round(.07 * this.data.attributes.item_size)); l.css("line-height", Math.round(.07 * this.data.attributes.item_size) + "px"); l.appendTo(f); var c = e("<span>"); c.css("font-size", Math.round(.21 * this.data.attributes.item_size)); c.css("line-height", Math.round(.07 * this.data.attributes.item_size) + "px"); c.appendTo(f); this.data.text_elements[a] = c } if (this.config.start && this.data.paused === false) this.start() }; d.prototype.update = function () { var e, t; var r = this.data.prev_time; var i = new Date; this.data.prev_time = i; if (r === null) r = i; if (!this.config.count_past_zero) { if (i > this.data.attributes.ref_date) { for (var o in this.data.drawn_units) { var a = this.data.drawn_units[o]; this.data.text_elements[a].text("0"); var f = o * this.data.attributes.item_size + this.data.attributes.item_size / 2; var l = this.data.attributes.item_size / 2; var c = this.config.time[a].color; this.drawArc(f, l, c, 0) } this.stop(); return } } e = (this.data.attributes.ref_date - i) / 1e3; t = (this.data.attributes.ref_date - r) / 1e3; var p = this.config.animation !== "smooth"; var d = h(e, t, this.data.total_duration, this.data.drawn_units, p); var v = h(e, t, u["Years"], s, p); var o = 0; var m = 0; var g = null; var y = this.data.drawn_units.slice(); for (var o in s) { var a = s[o]; if (Math.floor(v.raw_time[a]) !== Math.floor(v.raw_old_time[a])) { this.notifyListeners(a, Math.floor(v.time[a]), Math.floor(e), "all") } if (y.indexOf(a) < 0) continue; if (Math.floor(d.raw_time[a]) !== Math.floor(d.raw_old_time[a])) { this.notifyListeners(a, Math.floor(d.time[a]), Math.floor(e), "visible") } this.data.text_elements[a].text(Math.floor(Math.abs(d.time[a]))); var f = m * this.data.attributes.item_size + this.data.attributes.item_size / 2; var l = this.data.attributes.item_size / 2; var c = this.config.time[a].color; if (this.config.animation === "smooth") { if (g !== null) { if (Math.floor(d.time[g]) > Math.floor(d.old_time[g])) { this.radialFade(f, l, c, 1, a); this.data.state.fading[a] = true } else if (Math.floor(d.time[g]) < Math.floor(d.old_time[g])) { this.radialFade(f, l, c, 0, a); this.data.state.fading[a] = true } } if (!this.data.state.fading[a]) { this.drawArc(f, l, c, d.pct[a]) } } else { this.animateArc(f, l, c, d.pct[a], d.old_pct[a], (new Date).getTime() + n) } g = a; m++ } var b = this; var w = function () { b.update.call(b) }; if (this.config.animation === "smooth") { this.data.animation_frame = window.top.requestAnimationFrame(w, b.element, b) } else { var E = e % 1 * 1e3; if (E < 0) E = 1e3 + E; E += 50; b.data.animation_frame = window.top.setTimeout(function () { b.data.animation_frame = window.top.requestAnimationFrame(w, b.element, b) }, E) } }; d.prototype.animateArc = function (e, r, i, s, o, u) { if (t) return; var a = o - s; if (Math.abs(a) > .5) { if (s === 0) { this.radialFade(e, r, i, 1) } else { this.radialFade(e, r, i, 0) } } else { var f = (n - (u - (new Date).getTime())) / n; if (f > 1) f = 1; var l = o * (1 - f) + s * f; this.drawArc(e, r, i, l); if (f >= 1) return; var c = this; window.top.requestAnimationFrame(function () { c.animateArc(e, r, i, s, o, u) }, this.element, null) } }; d.prototype.drawArc = function (e, n, r, i) { if (t) return; var s = Math.max(this.data.attributes.outer_radius, this.data.attributes.item_size / 2); this.data.attributes.context.clearRect(e - s, n - s, s * 2, s * 2); if (this.config.use_background) { this.data.attributes.context.beginPath(); this.data.attributes.context.arc(e, n, this.data.attributes.radius, 0, 2 * Math.PI, false); this.data.attributes.context.lineWidth = this.data.attributes.line_width * this.config.bg_width; this.data.attributes.context.strokeStyle = this.config.circle_bg_color; this.data.attributes.context.stroke() } var o, u, a; var f = -.5 * Math.PI; var l = 2 * Math.PI; o = f + this.config.start_angle / 360 * l; var c = 2 * i * Math.PI; if (this.config.direction === "Both") { a = false; o -= c / 2; u = o + c } else { if (this.config.direction === "Clockwise") { a = false; u = o + c } else { a = true; u = o - c } } this.data.attributes.context.beginPath(); this.data.attributes.context.arc(e, n, this.data.attributes.radius, o, u, a); this.data.attributes.context.lineWidth = this.data.attributes.line_width; this.data.attributes.context.strokeStyle = r; this.data.attributes.context.stroke() }; d.prototype.radialFade = function (e, t, n, r, i) { var s = a(n); var o = this; var u = .2 * (r === 1 ? -1 : 1); var f; for (f = 0; r <= 1 && r >= 0; f++) { (function () { var n = 50 * f; var i = "rgba(" + s.r + ", " + s.g + ", " + s.b + ", " + Math.round(r * 10) / 10 + ")"; window.top.setTimeout(function () { o.drawArc(e, t, i, 1) }, n) })(); r += u } if (typeof i !== undefined) { window.top.setTimeout(function () { o.data.state.fading[i] = false }, 50 * f) } }; d.prototype.timeLeft = function () { var e = new Date; return (this.data.attributes.ref_date - e) / 1e3 }; d.prototype.start = function () { window.top.cancelAnimationFrame(this.data.animation_frame); window.top.clearTimeout(this.data.animation_frame); var t = e(this.element).data("date"); if (typeof t === "undefined") { t = e(this.element).attr("data-date") } if (typeof t === "string") { this.data.attributes.ref_date = c(t) } else if (typeof this.data.timer === "number") { if (this.data.paused) { this.data.attributes.ref_date = (new Date).getTime() + this.data.timer * 1e3 } } else { var n = e(this.element).data("timer"); if (typeof n === "undefined") { n = e(this.element).attr("data-timer") } if (typeof n === "string") { n = parseFloat(n) } if (typeof n === "number") { this.data.timer = n; this.data.attributes.ref_date = (new Date).getTime() + n * 1e3 } else { this.data.attributes.ref_date = this.config.ref_date } } this.data.paused = false; this.update() }; d.prototype.restart = function () { this.data.timer = false; this.start() }; d.prototype.stop = function () { if (typeof this.data.timer === "number") { this.data.timer = this.timeLeft(this) } this.data.paused = true; window.top.cancelAnimationFrame(this.data.animation_frame) }; d.prototype.destroy = function () { this.stop(); this.container.remove(); e(this.element).removeAttr("data-tc-id"); e(this.element).removeData("tc-id") }; d.prototype.setOptions = function (t) { if (this.config === null) { this.default_options.ref_date = new Date; this.config = e.extend(true, {}, this.default_options) } e.extend(true, this.config, t); this.data.total_duration = this.config.total_duration; if (typeof this.data.total_duration === "string") { if (typeof u[this.data.total_duration] !== "undefined") { this.data.total_duration = u[this.data.total_duration] } else if (this.data.total_duration === "Auto") { for (var n in this.config.time) { if (this.config.time[n].show) { this.data.total_duration = u[o[n]]; break } } } else { this.data.total_duration = u["Years"]; console.error("Valid values for TimeCircles config.total_duration are either numeric, or (string) Years, Months, Days, Hours, Minutes, Auto") } } }; d.prototype.addListener = function (e, t, n) { if (typeof e !== "function") return; if (typeof n === "undefined") n = "visible"; this.listeners[n].push({ func: e, scope: t }) }; d.prototype.notifyListeners = function (e, t, n, r) { for (var i = 0; i < this.listeners[r].length; i++) { var s = this.listeners[r][i]; s.func.apply(s.scope, [e, t, n]) } }; d.prototype.default_options = { ref_date: new Date, start: true, animation: "smooth", count_past_zero: true, circle_bg_color: "#60686F", use_background: true, fg_width: .1, bg_width: 1.2, total_duration: "Auto", direction: "Clockwise", start_angle: 0, time: { Days: { show: true, text: "Days", color: "#FC6" }, Hours: { show: true, text: "Hours", color: "#9CF" }, Minutes: { show: true, text: "Minutes", color: "#BFB" }, Seconds: { show: true, text: "Seconds", color: "#F99" } } }; var v = function (e, t) { this.elements = e; this.options = t; this.foreach() }; v.prototype.getInstance = function (t) { var n; var r = e(t).data("tc-id"); if (typeof r === "undefined") { r = l(); e(t).attr("data-tc-id", r) } if (typeof p[r] === "undefined") { var i = this.options; var s = e(t).data("options"); if (typeof s === "string") { s = JSON.parse(s) } if (typeof s === "object") { i = e.extend(true, {}, this.options, s) } n = new d(t, i); p[r] = n } else { n = p[r]; if (typeof this.options !== "undefined") { n.setOptions(this.options) } } return n }; v.prototype.foreach = function (e) { var t = this; this.elements.each(function () { var n = t.getInstance(this); if (typeof e === "function") { e(n) } }); return this }; v.prototype.start = function () { this.foreach(function (e) { e.start() }); return this }; v.prototype.stop = function () { this.foreach(function (e) { e.stop() }); return this }; v.prototype.restart = function () { this.foreach(function (e) { e.restart() }); return this }; v.prototype.rebuild = function () { this.foreach(function (e) { e.initialize(false) }); return this }; v.prototype.getTime = function () { return this.getInstance(this.elements[0]).timeLeft() }; v.prototype.addListener = function (e, t) { if (typeof t === "undefined") t = "visible"; var n = this; this.foreach(function (r) { r.addListener(e, n.elements, t) }); return this }; v.prototype.destroy = function () { this.foreach(function (e) { e.destroy() }); return this }; v.prototype.end = function () { return this.elements }; e.fn.TimeCircles = function (e) { return new v(this, e) } })(jQuery)